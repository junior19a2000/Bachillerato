# %%--- [python]
# properties:
#   run_on_load: true
#   bottom_hidden: true
#   top_hidden: true
# ---%%
import numpy as np
import matplotlib.pyplot as plt
import random
# %%--- [python]
# properties:
#   run_on_load: true
#   top_hidden: true
# ---%%
def error():
  VR  = np.array([])
  VA  = np.array([])
  VU  = np.array([])
  VRR = np.array([])
  VAR = np.array([])
  VUR = np.array([])
  x   = np.linspace(1, 100, 100)
  
  for i in range(100):
    R = np.random.randint(10, 1001, 1, dtype = 'int64')
    r = np.random.randint(0, R, 1, dtype = 'int64')
    R = R / 1000
    r = r / 1000
    M = np.random.randint(1, 1000, 1, dtype = 'int64')
    m = np.random.randint(1, 1000, 1, dtype = 'int64')
    V = np.random.randint(1, 1000, 1, dtype = 'int64')
    v = np.random.randint(1, 1000, 1, dtype = 'int64')
    f = np.random.randint(1, 1000, 1, dtype = 'int64')
    t = np.random.randint(1, 1000, 1, dtype = 'int64')
    N = (4 * R * (M * np.sin(np.arctan(M / m)) + m * np.cos(np.arctan(M / m)))) / (np.pi * (R ** 4 - r ** 4))
    C = (4 * (R ** 2 + R * r + r ** 2) * (V * np.sin(np.arctan(M / m)) ** 2 + v * np.cos(np.arctan(M / m)) ** 2)) / (3 * np.pi * (R ** 4 - r ** 4))
    F = f / (np.pi * (R ** 2 - r ** 2))
    T = (2 * t * R) / (np.pi * (R ** 4 - r ** 4))
    NmaxR = N + F
    CmaxR = T + C * random.choice([-1, 1])
    CmaxA = T + C
    CmaxU = T + 0
    VR = np.append(VR, np.sqrt(NmaxR ** 2 + 3 * CmaxR ** 2))
    VA = np.append(VA, np.sqrt(NmaxR ** 2 + 3 * CmaxA ** 2))
    VU = np.append(VU, np.sqrt(NmaxR ** 2 + 3 * CmaxU ** 2))
    T = (i + 1) * C
    NmaxR = N + F
    CmaxR = T + C * random.choice([-1, 1])
    CmaxA = T + C
    CmaxU = T + 0
    VRR = np.append(VRR, np.sqrt(NmaxR ** 2 + 3 * CmaxR ** 2))
    VAR = np.append(VAR, np.sqrt(NmaxR ** 2 + 3 * CmaxA ** 2))
    VUR = np.append(VUR, np.sqrt(NmaxR ** 2 + 3 * CmaxU ** 2))
  
  plt.close('all') 
  fig, axs = plt.subplots(ncols = 1, nrows = 2, figsize = (5.5, 5), constrained_layout = True)
  axs[0].plot(x, abs((VR - VA) / VR) * 100, color = 'green', linestyle = 'solid', linewidth = 1)
  axs[0].plot(np.array([1, 100]), np.repeat(np.mean(abs((VR - VA) / VR) * 100), 2), color = 'green', linestyle = 'dotted', linewidth = 1, label = r'$\epsilon = {}$'.format(np.mean(abs((VR - VA) / VR) * 100)))
  axs[0].plot(x, abs((VR - VU) / VR) * 100, color = 'blue', linestyle = 'solid', linewidth = 1)
  axs[0].plot(np.array([1, 100]), np.repeat(np.mean(abs((VR - VU) / VR) * 100), 2), color = 'blue', linestyle = 'dotted', linewidth = 1, label = r'$\epsilon = {}$'.format(np.mean(abs((VR - VU) / VR) * 100)))
  axs[0].set_xlabel('Dominio del eje')
  axs[0].set_ylabel('Von Misses')
  axs[0].legend(loc = "upper right")
  axs[0].grid()
  axs[1].plot(x, abs((VRR - VAR) / VRR) * 100, color = 'green', linestyle = 'solid', linewidth = 1)
  axs[1].plot(x, abs((VRR - VUR) / VRR) * 100, color = 'blue', linestyle = 'solid', linewidth = 1)
  axs[1].set_xlabel('Esfuerzo torsional / Esfuerzo cortante')
  axs[1].set_ylabel('Porcentaje de error')
  axs[1].grid()
  plt.show()
# %%--- [python]
# properties:
#   run_on_load: true
# ---%%
error()